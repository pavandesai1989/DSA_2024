https://leetcode.com/problems/find-k-closest-elements/description/

Notes:
For finding the closest element, the most optimal approach will be binary search.Find the mid using binary search.break once u get mid element
Now you have to take a pointer i=mid-1 and j=mid.
Now, comparing between i and j, which ever is smaller, we will put that into answer vector, and update the values of i and j.
This we will do for k>0 times.
The last step is to sort the answer vector and return.

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) 
    {
        vector<int> res;
        int n = arr.size();
        int l=0;
        int h=n-1;
        int mid=0;

        while(l<=h)
        {
            mid = l + (h-l)/2;
            if(arr[mid]==x)
            {
                break;
            }
            else if(arr[mid]>x)
            {
                h = mid-1;
            }
            else
            {
                l = mid+1;
            }
        }

        l=mid-1;
        h=mid;

        while(k>0 && l>=0 && h<n)
        {
            if(abs(arr[l]-x)<=abs(arr[h]-x)) //imp <=
            {
                res.push_back(arr[l]);
                l--;
            }
            else
            {
                res.push_back(arr[h]);
                h++;
            }
            k--;
        }

        while(k>0 && l>=0)
        {
            res.push_back(arr[l]);
            l--;
            k--;
        }
        while(k>0 && h<n)
        {
            res.push_back(arr[h]);
            h++;
            k--;
        }
        sort(res.begin(),res.end());
        return res;
    }
};
