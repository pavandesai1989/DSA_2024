//https://leetcode.com/problems/longest-common-subsequence/description/
class Solution {
public:
    int helper(int i,int j,string s1,string s2)
    {
        //base case
        if(i<0 || j<0)
          return 0;

        //if char match
        if(s1[i]==s2[j])
          return 1+helper(i-1,j-1,s1,s2);

        //if char don't match
        return max(helper(i-1,j,s1,s2) , helper(i,j-1,s1,s2));    
    }
    int longestCommonSubsequence(string text1, string text2) 
    {
        return helper(text1.length()-1,text2.length()-1,text1,text2);
    }
};

class Solution {
public:
    int helper(int i,int j,string& s1,string& s2,vector<vector<int>>& dp)   //strings by ref vvvvvimp
    {
        //base case
        if(i<0 || j<0)
          return 0;

        if(dp[i][j]!=-1)
          return dp[i][j];  

        //if char match
        if(s1[i]==s2[j])
          return dp[i][j] = 1+helper(i-1,j-1,s1,s2,dp);
        else
          return dp[i][j] = max(helper(i-1,j,s1,s2,dp) , helper(i,j-1,s1,s2,dp));    
    }

    int longestCommonSubsequence(string text1, string text2) 
    {
        //max value of i and j are lens create dp array of m+1 n+1
        int m = text1.length();
        int n = text2.length();

        vector<vector<int>> dp(m,vector<int>(n,-1));
        return helper(m-1,n-1,text1,text2,dp);
    }
};

**************
nt longestCommonSubsequence(string text1, string text2) 
    {
        //max value of i and j are lens create dp array of m+1 n+1
        int m = text1.length();
        int n = text2.length();

        vector<vector<int>> dp(m+1,vector<int>(n+1,0));

        for(int i=1;i<=m;++i)
        {
            for(int j=1;j<=n;++j)
            {
                if(text1[i-1] == text2[j-1])
                   dp[i][j] = 1 + dp[i-1][j-1];
                else
                {
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }   
            }
        }
        return dp[m][n];
        
    }
