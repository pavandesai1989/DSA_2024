https://leetcode.com/problems/longest-palindromic-subsequence/description/

class Solution {
public:
    int helper(int i,int j,string s)
    {
        //base case
        if(i>j)
          return 0;

        if(i==j)
           return 1;

        if(s[i]==s[j])
        {
            return 2 + helper(i+1,j-1,s);
        } 
        else
        {
            return max(helper(i+1,j,s),helper(i,j-1,s));
        }    
    }
    int longestPalindromeSubseq(string s) 
    {
        int n = s.length();
        int i=0;
        int j=n-1;
        return helper(i,j,s);
    }
};

*****
class Solution {
public:
    int dp[1001][1001];
    int helper(int i,int j,string& s)   //string must be by ref ************
    {
        //base case
        if(i>j)
          return 0;

        if(i==j)
           return 1;

        if(dp[i][j]!=-1)
          return dp[i][j];   

        if(s[i]==s[j])
        {
            return dp[i][j] = 2 + helper(i+1,j-1,s);
        } 
        else
        {
            return dp[i][j] = max(helper(i+1,j,s),helper(i,j-1,s));
        }    
     }
    int longestPalindromeSubseq(string s) 
    {
        int n = s.length();
        memset(dp,-1,sizeof(dp));
        return helper(0,n-1,s);
    }
};
