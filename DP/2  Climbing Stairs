//https://leetcode.com/problems/climbing-stairs/description/

*******recursion*********
class Solution {
public:
    int climbStairs(int n) 
    {
        if(n<0)  return 0;
        if(n==0) return 1;

        return climbStairs(n-1) + climbStairs(n-2);
    }
};

Time : 2^n
space : 0(n)

******memoization*********

class Solution {
public:
    int solve(int n,vector<int>& dp)
    {
        if(n<0)  return 0;
        if(n==0) return 1;

        if(dp[n]!=-1)
          return dp[n];

        return dp[n] = solve(n-1,dp) + solve(n-2,dp);
  
    }
    int climbStairs(int n) 
    {
        if(n<0)  return 0;
        if(n==0) return 1;

        vector<int> dp(n+1,-1);

        return solve(n,dp);
    }
};

Time : o(n)
space : o(n)  stack space + o(n)  dp array



********tabulation********
class Solution {
public:
    int climbStairs(int n) 
    {
        vector<int> dp(n+1,-1);
        dp[0]=1;
        dp[1]=1;

        for(int i=2;i<=n;i++)
        {
            dp[i] = dp[i-1]+dp[i-2];
        }

        return dp[n];
    }
};

Time : o(n)
space : o(n) dp array 


*******space optimization*****
same as fibonacci

