https://leetcode.com/problems/palindromic-substrings/description/

*******
   // 2. memoization
    // Time: O(n ^ 2)
    // space: O(n ^ 2)
    
find all substrings and call ispalindrome 
memoize ispalindrome 

class Solution {
public:
    bool check(int i,int j,string s,vector<vector<int>>& dp)
    {
        if(i>j)
          return true;

        if(dp[i][j] != -1)
          return dp[i][j];  

        if(s[i]==s[j])
           return dp[i][j] = check(i+1,j-1,s,dp); 

        return dp[i][j]=false;    
    }
    int countSubstrings(string s) 
    {
        //check ispalindrome for all substrings 
        
        int n = s.length();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                if(check(i,j,s,dp))
                {
                    cnt++;
                }
            }
        }
        return cnt;
    }
};

*****************tabulation*****
int countSubstrings(string s) 
    {
        //check ispalindrome for all substrings 
        
        int n = s.length();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        int cnt=0;
        
        for(int L=1;L<=n;L++) //need for each length like 1 2 3 4 ......
        {
            for(int i=0;i+L-1<n;++i)
            {
                int j = i+L-1;
                if(i==j)  //single length string
                {
                    dp[i][j] = 1;
                }
                else if (i+1==j) //2 length string 
                {
                   dp[i][j] = s[i]==s[j];
                }
                else //grater than 2 length . compare last 2 characters and use recursion for others
                {
                    dp[i][j] = (s[i]==s[j] && dp[i+1][j-1]);
                }

                if(dp[i][j])
                   cnt++;
            }
        }
        return cnt++;
    }
