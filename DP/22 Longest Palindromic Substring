https://leetcode.com/problems/longest-palindromic-substring/description/

class Solution {
public:
    bool ispalindrome(int i,int j,string&s)
    {
        if(i>=j)
          return true;

        if(s[i]==s[j])
          return  ispalindrome(i+1,j-1,s);

        return false;   
    }
    string longestPalindrome(string s) 
    {
        int n=s.length();
        int maxlen = 0;
        int sp=0;
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                if(ispalindrome(i,j,s) && j-i+1>maxlen){
                    maxlen = j-i+1;
                    sp=i; //vvvvvimp first idx
                }
            }
        }
        return s.substr(sp,maxlen);
    }
};

****memoizae
class Solution {
public:
    bool ispalindrome(int i,int j,string&s,vector<vector<int>>& dp)
    {
        if(i>=j)
          return true;

        if(dp[i][j] != -1)
          return dp[i][j];  

        if(s[i]==s[j])
          return  dp[i][j] = ispalindrome(i+1,j-1,s,dp);

        return dp[i][j] = false;   
    }
    string longestPalindrome(string s) 
    {
        int n=s.length();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        int maxlen = 0;
        int sp=0;
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                if(ispalindrome(i,j,s,dp) && j-i+1>maxlen){
                    maxlen = j-i+1;
                    sp=i; //vvvvvimp first idx
                }
            }
        }
        return s.substr(sp,maxlen);
    }
};

