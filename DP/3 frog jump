//https://www.naukri.com/code360/problems/frog-jump_3621012



*******recursion*****
#include <bits/stdc++.h> 
int helper(int idx,vector<int>& ht)
{
    if(idx==0)
       return 0;

    int left = helper(idx-1,ht) + abs(ht[idx]-ht[idx-1]);
    int right = INT_MAX;
    if(idx>1)
       right = helper(idx-2,ht) + abs(ht[idx]-ht[idx-2]);

    return min(left,right);  
}
int frogJump(int n, vector<int> &ht)
{
     return helper(n-1,ht);
}


*******memoization********
#include <bits/stdc++.h> 
int helper(int idx,vector<int>& ht,vector<int>& dp)
{
    if(idx==0)
       return 0;

   if(dp[idx]!=-1)
      return dp[idx];    

    int left = helper(idx-1,ht,dp) + abs(ht[idx]-ht[idx-1]);
    int right = INT_MAX;
    if(idx>1)
       right = helper(idx-2,ht,dp) + abs(ht[idx]-ht[idx-2]);

    return dp[idx] = min(left,right);  
}
int frogJump(int n, vector<int> &ht)
{
   vector<int> dp(n+1,-1);    
   return helper(n-1,ht,dp);
}

Time Complexity: O(N)

Reason: The overlapping subproblems will return the answer in constant time O(1). Therefore the total number of new subproblems we solve is ‘n’. Hence total time complexity is O(N).

Space Complexity: O(N)

Reason: We are using a recursion stack space(O(N)) and an array (again O(N)). Therefore total space complexity will be O(N) + O(N) ≈ O(N)

***********tabulation******
