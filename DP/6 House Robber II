//https://leetcode.com/problems/house-robber-ii/description/


class Solution {
public:
    int solve(int idx,vector<int>& arr,vector<int>& dp)
    {
        if(idx<0) return 0;
        if(idx==0)
          return arr[idx];

        if(dp[idx]!=-1)
           return dp[idx];  

        int pick = INT_MIN;
        int nopick = INT_MIN;

        pick = arr[idx];
        if(idx>1)
           pick += solve(idx-2,arr,dp);

        nopick = solve(idx-1,arr,dp);

        return dp[idx] = max(pick,nopick);     
    }
    int rob(vector<int>& nums) 
    {
        int n = nums.size();
        if(n==1)
          return nums[0];
        vector<int> dp(n,-1);
        vector<int> t1;
        vector<int> t2;

        for(int i=0;i<n;i++)
        {
            if(i!=0) t1.push_back(nums[i]);
            if(i!=n-1) t2.push_back(nums[i]);
        }

        int res1 = solve(n-2,t1,dp);
        vector<int> dp2(n,-1);
        int res2 = solve(n-2,t2,dp2);

        return max(res1,res2);
    }
};
