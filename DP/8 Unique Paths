https://leetcode.com/problems/unique-paths/description/

*******recursion*****
class Solution {
public:
    int paths(int i,int j,vector<vector<int>>& dp)
    {
        //base case
        if(i==0 && j==0)
          return 1;

        if(i<0 || j<0)
          return 0;

        if(dp[i][j] != -1)
          return dp[i][j];  

        int right = paths(i-1,j,dp);
        int down = paths(i,j-1,dp);

        return dp[i][j] = right+down;     

    }
    int uniquePaths(int m, int n) 
    {
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return paths(m-1,n-1,dp);
    }
};


********memoization******
    int paths(int i,int j,vector<vector<int>>& dp)
    {
        //base case
        if(i==0 && j==0)
          return 1;

        if(i<0 || j<0)
          return 0;

        if(dp[i][j] != -1)
          return dp[i][j];  

        int right = paths(i-1,j,dp);
        int down = paths(i,j-1,dp);

        return dp[i][j] = right+down;     

    }


    *********tabulation*****
    nt uniquePaths(int m, int n) 
    {
        vector<vector<int>> dp(m,vector<int>(n,-1));
        //base case 

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0 && j==0)
                {
                    dp[i][j] = 1;
                    continue;
                }

                int right=0;
                int down=0;

                if(i>0)
                   right = dp[i-1][j];

                if(j>0)
                   down = dp[i][j-1];  

                dp[i][j] = right + down;   
            }
        }
        return dp[m-1][n-1];
    }
