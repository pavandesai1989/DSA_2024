//https://leetcode.com/problems/squares-of-a-sorted-array/description/

***********brute *******
    vector<int> sortedSquares(vector<int>& nums) 
    {
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            nums[i] = nums[i] * nums[i];
        }

        sort(nums.begin(),nums.end());
        return nums;
    }

    Time : o(nlogn)
    space : o(1)


********* optimal *************
Time : 0(n)
space : o(1)

vector<int> sortedSquares(vector<int>& nums) 
    {
        vector<int> res(nums.size());   //imp initialise array as we know the size 
        int n=nums.size();

        int l=0;
        int h=n-1;
        int k=n-1;

        //squares of -ve will positive so compare the abs value and update in the res array 

        while(l<=h)
        {
            if(abs(nums[h]>abs(nums[l])))
            {
               res[k--] = nums[h]*nums[h];
               h--;
            }
            else
            {
                res[k--] = nums[l]*nums[l];
                l++;
            }
        }
        return res;
    }
