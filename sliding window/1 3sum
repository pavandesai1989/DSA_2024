//https://leetcode.com/problems/3sum/description/


*****bruteforce*****
vector<vector<int>> threeSum(vector<int>& nums) 
    {
       int n = nums.size();
       set<vector<int>> sett;
       
       for(int i=0;i<n;i++)
       {
        for(int j=i+1;j<n;j++)
        {
            for(int k=j+1;k<n;k++)
            {
                if(nums[i]+nums[j]+nums[k]==0)
                {
                    vector<int> temp({nums[i],nums[j],nums[k]});
                    sort(temp.begin(),temp.end());
                    sett.insert(temp);
                }
            }
        }
       }

       vector<vector<int>> res(sett.begin(),sett.end());
       return res;    
        
    }

    *******optimal*****
    class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        vector<vector<int>> res;
        int n = nums.size();

        //sort the arry
        sort(nums.begin(),nums.end());

        for(int i=0;i<n-1;i++)
        {
            //avoid duplicates 
            if(i>0 && nums[i]==nums[i-1])
               continue;

            //fix this element
            int first = nums[i];
            int l=i+1;
            int r=n-1;

            while(l<r)
            {
               int sum = nums[l]+nums[r]+first;
               if(sum==0)
               {
                   vector<int> temp({nums[l],nums[r],first});
                   res.push_back(temp);

                    //avoid duplicates 
                    while(l<r && nums[l]==nums[l+1]) l++;
                    while(l<r && nums[r]==nums[r-1]) r--;

                   l++;
                   r--;
               }
               else if(sum<0)
                  l++;
                else
                  r--;  
            }
        }
        return res;        
    }
};
